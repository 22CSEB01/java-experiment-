//password management
import java.util.regex.*;
class GFG {
    public static boolean
    isValidPassword(String password)
    {
        String regex = "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       + "(?=.*[@#$%^&+=])"
                       + "(?=\\S+$).{8,20}$";
        Pattern p = Pattern.compile(regex);
        if (password == null) {
            return false;
        }
        Matcher m = p.matcher(password);
        return m.matches();
    }
public static void main(String args[])
    {
 
        // Test Case 1:
        String str1 = "Geeks@portal20";
        System.out.println(isValidPassword(str1));
 
        // Test Case 2:
        String str2 = "Geeksforgeeks";
        System.out.println(isValidPassword(str2));
 
        // Test Case 3:
        String str3 = "Geeks@ portal9";
        System.out.println(isValidPassword(str3));
 
        // Test Case 4:
        String str4 = "1234";
        System.out.println(isValidPassword(str4));
 
        // Test Case 5:
        String str5 = "Gfg@20";
        System.out.println(isValidPassword(str5));
 
        // Test case 6;
        String str6 = "geeks@portal20";
        System.out.println(isValidPassword(str6));
    }
}
//Texting operations
import java.util.Scanner; 
 import java.util.StringTokenizer; 
 import java.util.HashMap; 
 import java.util.Map; 
  
 public class TextAnalyzer { 
     public static void main(String[] args) { 
         Scanner scanner = new Scanner(System.in); 
  
         System.out.println("Enter the text: "); 
         String text = scanner.nextLine(); 
  
          
         int totalCharacters = text.replaceAll("\\s", "").length(); 
         StringTokenizer tokenizer = new StringTokenizer(text, " "); 
         int totalWords = tokenizer.countTokens(); 
  
         String[] sentences = text.split("[.!?]"); 
         int totalSentences = sentences.length; 
  
         String[] words = text.split("[\\s,.!?]+"); 
         String longestWord = findLongestWord(words); 
  
         double averageWordLength = calculateAverageWordLength(words); 
  
         String mostFrequentWord = findMostFrequentWord(words); 
          
          
         System.out.println("Total characters (excluding whitespace): " + totalCharacters); 
         System.out.println("Total words: " + totalWords); 
         System.out.println("Total sentences: " + totalSentences); 
         System.out.println("Longest word: \"" + longestWord + "\""); 
         System.out.println("Average word length: " + String.format("%.2f", averageWordLength)); 
         System.out.println("Most frequent word: \"" + mostFrequentWord + "\" (appears " + getWordFrequency(words, mostFrequentWord) + " times)"); 
     } 
  
     public static String findLongestWord(String[] words) { 
         String longestWord = ""; 
         for (String word : words) { 
             if (word.length() > longestWord.length()) { 
                 longestWord = word; 
             } 
         } 
         return longestWord; 
     } 
  
     public static double calculateAverageWordLength(String[] words) { 
         int totalLength = 0; 
         for (String word : words) { 
             totalLength += word.length(); 
         } 
         return (double) totalLength / words.length; 
 } 
  
     public static String findMostFrequentWord(String[] words) { 
         Map<String, Integer> wordFrequency = new HashMap<>(); 
  
         for (String word : words) { 
             wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1); 
         } 
  
         int maxFrequency = 0; 
         String mostFrequentWord = ""; 
  
         for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) { 
             if (entry.getValue() > maxFrequency) { 
                 mostFrequentWord = entry.getKey(); 
                 maxFrequency = entry.getValue(); 
             } 
         } 
  
         return mostFrequentWord; 
     } 
  
     public static int getWordFrequency(String[] words, String word) { 
         int count = 0; 
         for (String w : words) { 
             if (w.equals(word)) { 
                 count++; 
             } 
         } 
         return count; 
     } 
 } 
 
